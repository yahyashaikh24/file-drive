    if not activation:
+            raise ValidationError(_('Activation code not found.'))
+
+        now_with_shift = timezone.now() - timedelta(hours=24)
+        if activation.created_at > now_with_shift:
+            raise ValidationError(_('Activation code has already been sent. You can request a new code in 24 hours.'))
+
+        self.user_cache = user
+
+        return email
+
+
+class RestorePasswordForm(UserCacheMixin, forms.Form):
+    email = forms.EmailField(label=_('Email'))
+
+    def clean_email(self):
+        email = self.cleaned_data['email']
+
+        user = User.objects.filter(email__iexact=email).first()
+        if not user:
+            raise ValidationError(_('You entered an invalid email address.'))
+
+        if not user.is_active:
+            raise ValidationError(_('This account is not active.'))
+
+        self.user_cache = user
+
+        return email
+
+
+class RestorePasswordViaEmailOrUsernameForm(UserCacheMixin, forms.Form):
+    email_or_username = forms.CharField(label=_('Email or Username'))
+
+    def clean_email_or_username(self):
+        email_or_username = self.cleaned_data['email_or_username']
+
+        user = User.objects.filter(Q(username=email_or_username) | Q(email__iexact=email_or_username)).first()
+        if not user:
+            raise ValidationError(_('You entered an invalid email address or username.'))
+
+        if not user.is_active:
+            raise ValidationError(_('This account is not active.'))
+
+        self.user_cache = user
+
+        return email_or_username
+
+
+class ChangeProfileForm(forms.Form):
+    first_name = forms.CharField(label=_('First name'), max_length=30, required=False)
+    last_name = forms.CharField(label=_('Last name'), max_length=150, required=False)
+
+
+class ChangeEmailForm(forms.Form):
+    email = forms.EmailField(label=_('Email'))
+
+    def __init__(self, user, *args, **kwargs):
+        self.user = user
+        super().__init__(*args, **kwargs)
+
+    def clean_email(self):
+        email = self.cleaned_data['email']
+
+        if email == self.user.email:
+            raise ValidationError(_('Please enter another email.'))
+
+        user = User.objects.filter(Q(email__iexact=email) & ~Q(id=self.user.id)).exists()
+        if user:
+            raise ValidationError(_('You can not use this mail.'))
+
+        return email
+
+
+class RemindUsernameForm(UserCacheMixin, forms.Form):
+    email = forms.EmailField(label=_('Email'))
+
+    def clean_email(self):
+        email = self.cleaned_data['email']
+
+        user = User.objects.filter(email__iexact=email).first()
+        if not user:
+            raise ValidationError(_('You entered an invalid email address.'))
+
+        if not user.is_active:
+            raise ValidationError(_('This account is not active.'))
+
+        self.user_cache = user
+
+        return email
diff --git a/file_drive-master/accounts/models.py b/file_drive-master/accounts/models.py
new file mode 100644
index 0000000000000000000000000000000000000000..fa08d4fa867c8d6fe180d5b90f8c9cbf5d972651
--- /dev/null
+++ b/file_drive-master/accounts/models.py
@@ -0,0 +1,8 @@
+from django.db import models
+from django.contrib.auth.models import User
+
+class Activation(models.Model):
+    user = models.ForeignKey(User, on_delete=models.CASCADE)
+    created_at = models.DateTimeField(auto_now_add=True)
+    code = models.CharField(max_length=20, unique=True)
+    email = models.EmailField(blank=True)
\ No newline at end of file
diff --git a/file_drive-master/accounts/templates/accounts/emails/activate_profile.html b/file_drive-master/accounts/templates/accounts/emails/activate_profile.html
new file mode 100644
index 00000